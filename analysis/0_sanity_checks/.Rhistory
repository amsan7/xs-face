group_by(AgeGroup,Subject, Congruency) %>%
summarize(meanRT = mean(RT)) %>%
group_by(Subject) %>%
summarize(StroopRT = meanRT[Congruency==2] - meanRT[Congruency==1]) %>%
ungroup %>%
mutate(Subject = fct_reorder(Subject,StroopRT, .desc=TRUE))
StroopbySub_E1_4Yrs <- RTData_E1 %>%
filter(AgeGroup==2) %>%
group_by(AgeGroup,Subject, Congruency) %>%
summarize(meanRT = mean(RT)) %>%
group_by(Subject) %>%
summarize(StroopRT = meanRT[Congruency==2] - meanRT[Congruency==1]) %>%
ungroup %>%
mutate(Subject = fct_reorder(Subject,StroopRT, .desc=TRUE))
StroopbySub_E2 <- fastKids_RT %>%
group_by(Subject, Congruency) %>%
summarize (meanRT = mean(RT)) %>%
group_by(Subject) %>%
summarize(StroopRT = meanRT[Congruency==2] - meanRT[Congruency==1]) %>%
ungroup %>%
mutate(Subject = fct_reorder(Subject,StroopRT, .desc=TRUE))
###
StroopErrorbySub_E1_3Years <- ErrorData_E1 %>%
filter(AgeGroup==1) %>%
group_by (Congruency, Subject) %>%
summarize(meanError = mean(error)) %>%
group_by(Subject) %>%
summarize(StroopErr = meanError[Congruency==2] - meanError[Congruency==1]) %>%
ungroup %>%
mutate(Subject = fct_reorder(Subject,StroopErr, .desc=TRUE))
StroopErrorbySub_E1_4Years <- ErrorData_E1 %>%
filter(AgeGroup==2) %>%
group_by (Congruency, Subject) %>%
summarize(meanError = mean(error)) %>%
group_by(Subject) %>%
summarize(StroopErr = meanError[Congruency==2] - meanError[Congruency==1]) %>%
ungroup %>%
mutate(Subject = fct_reorder(Subject,StroopErr, .desc=TRUE))
StroopErrorbySub_E2 <- ErrorsbyCond_E2 %>%
group_by(Subject) %>%
rename(meanError = subErrors)%>%
summarize(StroopErr = meanError[Congruency==2] - meanError[Congruency==1]) %>%
ungroup %>%
mutate(Subject = fct_reorder(Subject,StroopErr, .desc=TRUE))
RTLimits=c(-800,800)
ErrLimits=c(-1,1)
### Plot stroop error and RT effects for individual subjects
g1=ggplot(StroopbySub_E1_3Yrs, aes(x = Subject, y = StroopRT)) +
geom_point(alpha=.75) +
theme_few() +
labs(y = "Stroop RT (ms)", x ="") +
ylim(RTLimits) +
geom_hline(yintercept=0, linetype="dashed",
color = "grey", size=.5) +
theme(legend.position="none",axis.ticks.x=element_blank(), axis.text.x=element_blank())
g2=ggplot(StroopbySub_E1_4Yrs, aes(x = Subject, y = StroopRT)) +
geom_point(alpha=.75) +
theme_few() +
ylim(RTLimits) +
labs(y = "Stroop RT (ms)", x ="") +
geom_hline(yintercept=0, linetype="dashed",
color = "grey", size=.5) +  theme(legend.position="none",axis.ticks.x=element_blank(), axis.text.x=element_blank())
g3=ggplot(StroopbySub_E2, aes(x = Subject, y = StroopRT)) +
geom_point(alpha=.75) +
theme_few() +
ylim(RTLimits) +
labs(y = "Stroop RT (ms)", x ="") +
geom_hline(yintercept=0, linetype="dashed",
color = "grey", size=.5) +
theme(legend.position="none",axis.ticks.x=element_blank(), axis.text.x=element_blank())
###
g4=ggplot(StroopErrorbySub_E1_3Years, aes(x = Subject, y = StroopErr)) +
geom_point(alpha=.75) +
theme_few() +
labs(y = "Stroop Errors (%)", x ="") +
ylim(ErrLimits) +
geom_hline(yintercept=0, linetype="dashed",
color = "grey", size=.5) +  theme(legend.position="none",axis.ticks.x=element_blank(), axis.text.x=element_blank())
g5=ggplot(StroopErrorbySub_E1_4Years, aes(x = Subject, y = StroopErr)) +
geom_point(alpha=.75) +
theme_few() +
ylim(ErrLimits) +
labs(y = "Stroop Errors (%)", x ="") +
geom_hline(yintercept=0, linetype="dashed",
color = "grey", size=.5) +
theme(legend.position="none",axis.ticks.x=element_blank(), axis.text.x=element_blank())
g6=ggplot(StroopErrorbySub_E2, aes(x = Subject, y = StroopErr)) +
geom_point(alpha=.75) +
theme_few() +
ylim(ErrLimits) +
labs(y = "Stroop Errors (%)", x ="") +
geom_hline(yintercept=0, linetype="dashed",
color = "grey", size=.5) +  theme(legend.position="none",axis.ticks.x=element_blank(), axis.text.x=element_blank())
###
DiffScores = ggarrange(g4,g5,g6,g1,g2,g3, nrow=2) # errors first, then RT
ggsave("S2-IndivDiffScores.tiff", width = 11.5, height = 6,unit =  "in", plot = DiffScores, path="./figures/", device = "tiff",dpi = 300)
RTbyCond_3_Vals <- RTData_E1 %>%
filter(AgeGroup==1) %>%
group_by (Congruency, Subject) %>%
summarize(meanRT = mean(RT))
RTbyCond_4_Vals <- RTData_E1 %>%
filter(AgeGroup==2) %>%
group_by (Congruency, Subject) %>%
summarize(meanRT = mean(RT))
RTbyCond_E2_Vals <- fastKids_RT %>%
group_by (Congruency, Subject) %>%
summarize(meanRT = mean(RT))
#######
ErrbyCond_3_Vals <- ErrorData_E1 %>%
filter(AgeGroup==1) %>%
group_by (Congruency, Subject) %>%
summarize(meanError = mean(error)) %>%
mutate(meanError = meanError*100)
ErrbyCond_4_Vals <- ErrorData_E1 %>%
filter(AgeGroup==2) %>%
group_by (Congruency, Subject) %>%
summarize(meanError = mean(error)) %>%
mutate(meanError = meanError*100)
ErrbyCond_E2_Vals <- allData_E2_errors_raw %>%
group_by (Congruency, Subject) %>%
summarize(meanError = mean(error)) %>%
mutate(meanError = meanError*100)
###
g1=ggplot(RTbyCond_3_Vals, aes(x = Congruency, y = meanRT)) +
geom_point(aes(colour=factor(Congruency))) +
geom_line(aes(group = Subject), color="grey")  +
scale_colour_manual(values=c("#3C86A0", "#821919")) +
labs(y = "Average RT (ms)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
scale_y_continuous(limits=c(500,3000), oob = rescale_none)
g2=ggplot(RTbyCond_4_Vals, aes(x = Congruency, y = meanRT)) +
geom_point(aes(colour=factor(Congruency))) +
geom_line(aes(group = Subject), color="grey")  +
scale_colour_manual(values=c("#3C86A0", "#821919"))+
labs(y = "Average RT (ms)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
scale_y_continuous(limits=c(500,3000), oob = rescale_none)
g3=ggplot(RTbyCond_E2_Vals, aes(x = Congruency, y = meanRT)) +
geom_point(aes(colour=factor(Congruency))) +
geom_line(aes(group = Subject), color="grey")  +
scale_colour_manual(values=c("#3C86A0", "#821919"))+
labs(y = "Average RT (ms)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
scale_y_continuous(limits=c(1350,2100), oob = rescale_none) +
labs(y = "Average RT (ms)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
scale_y_continuous(limits=c(500,3000), oob = rescale_none)
###
g4=ggplot(ErrbyCond_3_Vals, aes(x = Congruency, y = meanError)) +
geom_point(aes(colour=factor(Congruency))) +
geom_line(aes(group = Subject), color="grey")  +
scale_colour_manual(values=c("#3C86A0", "#821919"))+
labs(y = "Mean error (%)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
ylim(c(0, 100)) +
ggtitle("E1: 3-Year-Olds")
g5=ggplot(ErrbyCond_4_Vals, aes(x = Congruency, y = meanError)) +
geom_point(aes(colour=factor(Congruency))) +
geom_line(aes(group = Subject), color="grey")  +
scale_colour_manual(values=c("#3C86A0", "#821919")) +
labs(y = "Mean error (%)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
ylim(c(0, 100)) +
ggtitle("E1: 4-Year-Olds")
g6=ggplot(ErrbyCond_E2_Vals, aes(x = Congruency, y = meanError)) +
geom_point(aes(colour=factor(Congruency))) +
geom_line(aes(group = Subject), color="grey")  +
scale_colour_manual(values=c("#3C86A0", "#821919")) +
labs(y = "Mean error (%)", x ="") +
theme(legend.position="none",axis.ticks.x=element_blank()) +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
ylim(c(0, 100)) +
ggtitle("E2: Replication")
compiledPlot=ggarrange(g4,g5,g6,g1,g2,g3, nrow=2) # errors first, then RT
ggsave("S3-AllData.tiff", width = 11.5, height = 6,unit =  "in", plot = compiledPlot, path="./figures/", device = "tiff",dpi = 300)
AgevStroopError
error_3YearOlds
cong_4years
incong_3years-cong_3years
mean(incong_3years-cong_3years)
mean(incong_3years-cong_3years)
sd(incong_3years-cong_3years)
avg_stroop_error_3yr=mean(incong_3years-cong_3years)
sd_stroop_error_3yr=sd(incong_3years-cong_3years)
avg_stroop_error_4yr=mean(incong_4years-cong_4years)
sd_stroop_error_4yr=sd(incong_4years-cong_4years)
showframes_frame_counts <- read_csv("../data/video_stats/frametimechecks_showframes.csv")
setwd("~/Documents/GitHub/xs-face/analysis-validation")
showframes_frame_counts <- read_csv("../data/video_stats/frametimechecks_showframes.csv")
library(tidyverse)
library(knitr)
showframes_frame_counts <- read_csv("../data/video_stats/frametimechecks_showframes.csv")
mtcnn_data <- read_csv("../data/final_detector_output/mtcnn3.csv")
check_frame_times <- mtcnn_data %>%
distinct(video, frame) %>%
group_by(video) %>%
summarise(num_frames = n()) %>%
left_join(showframes_frame_counts)
showframes_frame_counts
showframes_frame_counts$subid
mtcnn_data
showframes_frame_counts
showframes_frame_counts <- showframes_frame_counts %>%
mutate(video = strsplit(subid,'.csv',2)[1])
showframes_frame_counts
showframes_frame_counts$video
strsplit(showframes_frame_counts$subid,'.csv',2)
strsplit(showframes_frame_counts$subid,'.csv',2)[1]
strsplit(showframes_frame_counts$subid,'.csv',2)[[1]]
strsplit(showframes_frame_counts$subid,'.csv',2)[[1]]
showframes_frame_counts <- showframes_frame_counts %>%
mutate(video = strsplit(subid,'.csv',2)[[1]]) %>%
mutate(video = str_replace(video,'-','_'))
showframes_frame_counts
showframes_frame_counts$video
showframes_frame_counts <- showframes_frame_counts %>%
group_by(subid) %>%
mutate(video = strsplit(subid,'.csv',2)) %>%
mutate(video = str_replace(video,'-','_'))
showframes_frame_counts
showframes_frame_counts$video
mtcnn_data
mtcnn_data$video
type(mtcnn_data$video)_
type(mtcnn_data$video)
summary(mtcnn_data$video)
summary(showframes_frame_counts$video)
showframes_frame_counts <- showframes_frame_counts %>%
group_by(subid) %>%
mutate(video = strsplit(subid,'.csv',2)) %>%
mutate(video = str_replace(video,'-','_'))
check_frame_times <- mtcnn_data %>%
distinct(video, frame) %>%
group_by(video) %>%
summarise(num_frames = n()) %>%
left_join(showframes_frame_counts)
check_frame_times
showframes_frame_counts <- showframes_frame_counts %>%
group_by(subid) %>%
mutate(video = strsplit(subid,'.csv',2)) %>%
mutate(video = str_replace(video,'-','_'))
check_frame_times <- mtcnn_data %>%
distinct(video, frame) %>%
group_by(video) %>%
summarise(num_frames = n()) %>%
left_join(showframes_frame_counts) %>%
mutate(checkOK = num_frames == last.frame)
kable(check_frame_times)
rm(list=ls())
library(readr)
library(magrittr)
library(dplyr)
library(lubridate)
library(stringr)
demo <- read_csv("../data/demographics/demographics.csv")
movies <- read_csv("../data/video_stats/new_movie_lengths.csv")
MTCNN <- read_csv("../data/final_detector_output/mtcnn3.csv")
openPose <- read_csv("../data/final_detector_output/openpose_results_truncated_2.csv")
frameTimes <- read_csv("../data/video_stats/frametimechecks_showframes.csv")
demo %<>%
rename(recorded_len = len_seconds)
## movie lengths
movies$frameCount=movies$fps*movies$length
movies %<>%
rename(last_frame_movie = frameCount,
length_movie = length)
# standardize
MTCNN$frame=as.numeric(MTCNN$frame)
MTCNN$subid=MTCNN$video
openPose$frame=as.numeric(openPose$frame)
openPose$subid=openPose$name
## get out max frame
MTCNN.lens <- MTCNN %>%
group_by(subid) %>%
summarise(frames_dets_mtcnn = max(frame))
openPose.lens <- openPose %>%
group_by(subid) %>%
summarise(frames_dets_op = max(frame))
## get frames from frame time output (ffprobe)
frameTimes <- frameTimes %>%
mutate(last_frame_times = last.frame) %>%
mutate(subid = str_replace_all(subid,"-","_")) %>%
mutate(subid = str_sub(as.character(subid),start=1,end=7))
all_data <- left_join(demo, movies) %>%
left_join(MTCNN.lens) %>%
left_join(openPose.lens) %>%
left_join(frameTimes) %>%
select(subid, recorded_len, length_movie, last_frame_movie, last_frame_times, frames_dets_mtcnn, frames_dets_op) %>%
mutate(det_frame_err = abs(last_frame_movie - frames_dets_mtcnn) > 100,
demo_time_err = abs(recorded_len - length_movie) > 1,
frame_time_diff = last_frame_times - frames_dets_mtcnn) %>%
data.frame
sum(all_data$frame_time_diff)
knitr::kable(all_data, digits = 2)
dets_MTCNN
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls()) # remove all objects from current workspace
library(dplyr)
library(readr)
library(magrittr)
library(tidyr)
library(assertthat)
source("helper.R")
dets_MTCNN <- read_csv("../data/final_detector_output/mtcnn3.csv") %>%
mutate(subid = video) %>%
mutate(frame = as.numeric(frame)) %>%
mutate(faceMT = as.logical(is_face)) %>%
distinct(video,frame,.keep_all=TRUE)
# viola jones face detectors
detsViola <- read_csv("../data/final_detector_output/viola.csv")
detsViola <- detsViola %>%
distinct(video,frame,.keep_all=TRUE)  %>%
mutate(faceVJ = as.logical(is_face))  %>%
mutate(frame = as.numeric(frame))
assert_that(dim(dets_MTCNN)[1]==dim(detsViola)[1])
assert_that(dim(dets)[1]==dim(detsOpenPose)[1])
assert_that(dim(dets_MTCNN)[1]==dim(detsOpenPose)[1])
detsOpenPose <- read_csv("../data/final_output/openpose_results_truncated_2.csv")
detsOpenPose <- read_csv("../data/final_detector_output/openpose_results_truncated_2.csv")
detsOpenPose <- detsOpenPose %>%
mutate(video = name) %>%
distinct(video,frame,.keep_all=TRUE)  %>%
mutate(frame = as.numeric(frame) + 1) %>% ## Frame output is off by one since we extracted from videos vs. frames.
mutate(faceOP = Nose_conf!=0)  %>%
mutate(wristOP = LWrist_conf!=0 | RWrist_conf!=0 )
# First -- MTCNN v Viola Joes
# These were done on the same frames, so should work
assert_that(dim(dets_MTCNN)[1]==dim(detsViola)[1])
##
missingInd=is.na(alldets$faceOP)
alldets=left_join(dets_MTCNN,detsViola[,c("video","frame","faceVJ")])  ## Join MTCNN + Viola Jones
alldets=left_join(alldets,detsOpenPose[,c("video","frame","faceOP","wristOP")])  ##  ++ OpenPose
dim(alldets)
dim(dets_MTCNN)
dim(detsOpenPose)
detsOpenPose
detsOpenPose$frame
assert_that(dim(dets_MTCNN)[1]==dim(detsViola)[1])
alldets=left_join(dets_MTCNN,detsViola[,c("video","frame","faceVJ")])  ## Join MTCNN + Viola Jones
alldets=left_join(alldets,detsOpenPose[,c("video","frame","faceOP","wristOP")])  ##  ++ OpenPose
detsOpenPose
detsOpenPose['faceOP']
# First -- MTCNN v Viola Joes
# These were done on the same frames, so should work
##
missingInd=is.na(alldets$faceOP)
assert_that(sum(is.na(alldets$faceOP))==45)
missingOP<-alldets %>%
filter(missingInd)
kable()
# First -- MTCNN v Viola Joes
# These were done on the same frames, so should work
##
missingInd=is.na(alldets$faceOP)
assert_that(sum(is.na(alldets$faceOP))==45)
missingOP<-alldets %>%
filter(missingInd)  %>%
kable()
missingOP
kable(missingOP)
missingOP
missingInd
missingOP
missingOP<- alldets %>%
filter(missingInd)
missingOP
missingOP$video
missingOP$frame
missingOP
missingOP<- alldets %>%
filter(missingInd) %>%
group_by(video) %>%
summarize(numPerSub = n())
missingOP
# First -- MTCNN v Viola Joes
# These were done on the same frames, so should work
##
missingInd=is.na(alldets$faceOP)
assert_that(sum(is.na(alldets$faceOP))==45)
missingOP<- alldets %>%
filter(missingInd) %>%
group_by(video) %>%
summarize(numPerSub = n(), isFaceMTCNN = sum(faceMT), isFaceJF = sum(faceVJ), avgFrameNum = mean(frame))
missingOP
alldets
maxFrameNum <- alldets %>%
group_by(video) %>%
summarize(maxFrame = max(frame))
maxFrameNum
# First -- MTCNN v Viola Joes
# These were done on the same frames, so should work
##
missingInd=is.na(alldets$faceOP)
assert_that(sum(is.na(alldets$faceOP))==45)
maxFrameNum <- alldets %>%
group_by(video) %>%
summarize(maxFrame = max(frame))
missingOP<- alldets %>%
filter(missingInd) %>%
group_by(video) %>%
left_join(maxFrameNum) %>%
summarize(numPerSub = n(), isFaceMTCNN = sum(faceMT), isFaceJF = sum(faceVJ), missingFrameStart = min(frame), maxFrameNum = maxFrameNum)
# First -- MTCNN v Viola Joes
# These were done on the same frames, so should work
##
missingInd=is.na(alldets$faceOP)
assert_that(sum(is.na(alldets$faceOP))==45)
maxFrameNum <- alldets %>%
group_by(video) %>%
summarize(maxFrame = max(frame))
missingOP<- alldets %>%
filter(missingInd) %>%
group_by(video) %>%
left_join(maxFrameNum) %>%
summarize(numPerSub = n(), isFaceMTCNN = sum(faceMT), isFaceJF = sum(faceVJ), missingFrameStart = min(frame), maxFrameNum = maxFrameNum[1])
missingOP
maxFrameNum
# First -- MTCNN v Viola Joes
# These were done on the same frames, so should work
##
missingInd=is.na(alldets$faceOP)
assert_that(sum(is.na(alldets$faceOP))==45)
maxFrameNum <- alldets %>%
group_by(video) %>%
summarize(maxFrame = max(frame))
missingOP<- alldets %>%
filter(missingInd) %>%
group_by(video) %>%
left_join(maxFrameNum) %>%
summarize(numPerSub = n(), isFaceMTCNN = sum(faceMT), isFaceJF = sum(faceVJ), missingFrameStart = min(frame), maxFrameNum = maxFrame[1])
missingOP
alldets$faceOP
alldets$faceOP==alldets$faceMT
sum(alldets$faceOP==alldets$faceMT)
mean(alldets$faceOP==alldets$faceMT)
(alldets$faceOP==alldets$faceMT)
test = (alldets$faceOP==alldets$faceMT)
sum(test)
test[test==TRUE]
test==TRUE
sum(test==TRUE_
test
as.logical(test)
sum(as.logical(test))
test==NA
sum(is.na(test))
alldets$faceOP[missingInd]=FALSE
alldets$wristOP[missingInd]=FALSE
sum(alldets$faceOP==alldets$faceMT)
sum(alldets$faceOP==alldets$faceMT)/length(alldets)
sum(alldets$faceOP==alldets$faceMT)
sum(alldets$faceOP==alldets$faceMT)
mean(alldets$faceOP==alldets$faceMT)
MTvsVJ = mean(alldets$faceOP==alldets$faceVJ)
MTvsVJ
# load demographics and pose / orientation / timing
demo.data <- read_csv("../data/demographics/demographics.csv") %>%
select(-ra, -assist, -len) ## -dot -dib fields did not exist, deleted bll
alldets<-arrange(alldets,video,frame)
# load demographics and pose / orientation / timing
demo.data <- read_csv("../data/demographics/demographics.csv") %>%
select(-ra, -assist, -len) ## -dot -dib fields did not exist, deleted bll
? distinct
alldets
d<- alldets %>%
distinct(video,frame,.keep_all=TRUE)
length(d)==length(alldets)
d<- alldets %>%
distinct(video,frame,.keep_all=FALSE)
length(d)==length(alldets)
alldets
length(alldets)
dim(alldets)
dim(alldets)[1]
dim(d)[1]
d<- alldets %>%
distinct(video,frame,.keep_all=FALSE)
length(d)==length(alldets)
length(d)
d
# calls helper functions in helper.r to get times and posture coding integrated
d <- alldets %>%
select(-c(is_face,video)) %>% # redudant with faceMT & subid, dropping
left_join(demo.data) %>% # join demographics info
group_by(subid) %>% # get subid
do(add.times(.)) %>%  # calls helper functions to add times
group_by(subid) %>%
do(add.posture(.)) ## adds both postures and orientatinos
d
test <- d %>%
filter(!is.na(dt)) %>%
mutate(isDuplicate = (dt==0)) %>%
group_by(subid) %>%
summarize(duplicateCount = sum(isDuplicate))
assert_that(sum(test$duplicateCount)==0)
assert_that(sum(is.na(d$time))==0)
d$dt
is.na(d$dt)
sum(is.na(d$dt))
test <- d %>%
mutate(isDuplicate = (dt==0)) %>%
group_by(subid) %>%
summarize(duplicateCount = sum(isDuplicate))
assert_that(sum(is.na(d$dt))==0)
assert_that(sum(test$duplicateCount)==0)
assert_that(sum(is.na(d$time))==0)
