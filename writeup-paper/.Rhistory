s <- s %>%
group_by(subid) %>%
do(posture.sync(.))
sync_times_check <- read_csv("../data/manual_sync_times/video_sync_times.csv")
s <- sync_times_check %>%
rename(subid = sid) %>%
group_by(subid) %>%
mutate(sync_time_string =toString(sync_time_stamp)) %>%
mutate(frames = str_split_fixed(sync_time_string,":",3)[,3]) %>%
mutate(sec = str_split_fixed(sync_time_string,":",3)[,2]) %>%
mutate(min = str_split_fixed(sync_time_string,":",3)[,1]) %>%
mutate(sync_time_ms = as.numeric(min)*6000 + as.numeric(sec)*1000 + as.numeric(frames)*33.33)
posture.sync <- function(x) {
fname <- paste("../data/posture/",
x$subid[1],
".csv",
sep="")
if (file.exists(fname)) {
postures <- read_csv(fname)
x$posture_start_time = postures$start[1]
}
return(x)
}
s <- s %>%
group_by(subid) %>%
do(posture.sync(.))
s
s$posture_start_time
qplot(s$sync_time_ms,s$posture_start_time)
qqplot(s$sync_time_ms,s$posture_start_time)
s$posture_start_time
s$sync_time_ms
s$posture_start_time - s$sync_time_ms
is.nan(s$posture_start_time()
``
is.nan(s$posture_start_time
is.nan(s$posture_start_time)
isnan(s$posture_start_time)
is.na(s$posture_start_time)
s$subid(is.na(s$posture_start_time))
s$subid[is.na(s$posture_start_time)]
sync_times_check <- read_csv("../data/manual_sync_times/video_sync_times.csv")
s <- sync_times_check %>%
rename(subid = sid) %>%
group_by(subid) %>%
mutate(sync_time_string =toString(sync_time_stamp)) %>%
mutate(frames = str_split_fixed(sync_time_string,":",3)[,3]) %>%
mutate(sec = str_split_fixed(sync_time_string,":",3)[,2]) %>%
mutate(min = str_split_fixed(sync_time_string,":",3)[,1]) %>%
mutate(sync_time_ms = as.numeric(min)*6000 + as.numeric(sec)*1000 + as.numeric(frames)*33.33)
posture.sync <- function(x) {
fname <- paste("../data/posture/",
x$subid[1],
".csv",
sep="")
if (file.exists(fname)) {
postures <- read_csv(fname)
x$posture_start_time = postures$start[0]
}
return(x)
}
s <- s %>%
group_by(subid) %>%
do(posture.sync(.))
paste("../data/posture/",
x$subid[1],
".csv",
sep="")
x<-s
paste("../data/posture/",
x$subid[1],
".csv",
sep="")
read_csv(fname)
fname = paste("../data/posture/",
x$subid[1],
".csv",
sep="")
read_csv(fname)
test = read_csv(fname)
test$start
test$start[0]
test$start[1]
sync_times_check <- read_csv("../data/manual_sync_times/video_sync_times.csv")
s <- sync_times_check %>%
rename(subid = sid) %>%
group_by(subid) %>%
mutate(sync_time_string =toString(sync_time_stamp)) %>%
mutate(frames = str_split_fixed(sync_time_string,":",3)[,3]) %>%
mutate(sec = str_split_fixed(sync_time_string,":",3)[,2]) %>%
mutate(min = str_split_fixed(sync_time_string,":",3)[,1]) %>%
mutate(sync_time_ms = as.numeric(min)*6000 + as.numeric(sec)*1000 + as.numeric(frames)*33.33)
posture.sync <- function(x) {
fname <- paste("../data/posture/",
x$subid[1],
".csv",
sep="")
if (file.exists(fname)) {
postures <- read_csv(fname)
x$posture_start_time = postures$start[1]
}
return(x)
}
s <- s %>%
group_by(subid) %>%
do(posture.sync(.))
s$posture_start_time
s$subid''
s$subid
subid = XS_0805
subid = "XS_0805"
sync_times_check <- read_csv("../data/manual_sync_times/video_sync_times.csv")
s <- sync_times_check %>%
rename(subid = sid) %>%
group_by(subid) %>%
mutate(sync_time_string =toString(sync_time_stamp)) %>%
mutate(frames = str_split_fixed(sync_time_string,":",3)[,3]) %>%
mutate(sec = str_split_fixed(sync_time_string,":",3)[,2]) %>%
mutate(min = str_split_fixed(sync_time_string,":",3)[,1]) %>%
mutate(sync_time_ms = as.numeric(min)*6000 + as.numeric(sec)*1000 + as.numeric(frames)*33.33)
posture.sync <- function(x) {
fname <- paste("../data/posture/",
x$subid[1],
".csv",
sep="")
if (file.exists(fname)) {
postures <- read_csv(fname)
x$posture_start_time = postures$start[1]
print(postures$start[1])
return(x)
}
s <- s %>%
group_by(subid) %>%
do(posture.sync(.))
postures$start[1]
postures <- read_csv(fname)
postures
postures$start
postures$start[1]
print(postures$start[1])
s$subid
sync_times_check <- read_csv("../data/manual_sync_times/video_sync_times.csv")
s <- sync_times_check %>%
rename(subid = sid) %>%
group_by(subid) %>%
mutate(sync_time_string =toString(sync_time_stamp)) %>%
mutate(frames = str_split_fixed(sync_time_string,":",3)[,3]) %>%
mutate(sec = str_split_fixed(sync_time_string,":",3)[,2]) %>%
mutate(min = str_split_fixed(sync_time_string,":",3)[,1]) %>%
mutate(sync_time_ms = as.numeric(min)*6000 + as.numeric(sec)*1000 + as.numeric(frames)*33.33)
posture.sync <- function(x) {
fname <- paste("../data/posture/",
x$subid[1],
".csv",
sep="")
if (file.exists(fname)) {
postures <- read_csv(fname)
x$posture_start_time = postures$start[1]
} else {
print(paste0("**** ", x$subid[1], " is missing posture ****"))
}
return(x)
}
s <- s %>%
group_by(subid) %>%
do(posture.sync(.))
sync_times_check <- read_csv("../data/manual_sync_times/video_sync_times.csv")
s <- sync_times_check %>%
rename(subid = sid) %>%
group_by(subid) %>%
mutate(sync_time_string =toString(sync_time_stamp)) %>%
mutate(frames = str_split_fixed(sync_time_string,":",3)[,3]) %>%
mutate(sec = str_split_fixed(sync_time_string,":",3)[,2]) %>%
mutate(min = str_split_fixed(sync_time_string,":",3)[,1]) %>%
mutate(sync_time_ms = as.numeric(min)*6000 + as.numeric(sec)*1000 + as.numeric(frames)*33.33)
posture.sync <- function(x) {
fname <- paste("../data/posture/",
x$subid[1],
".csv",
sep="")
if (file.exists(fname)) {
postures <- read_csv(fname)
x$posture_start_time = postures$start[1]
print(paste0("**** ", x$subid[1], " has time",x$posture_start_time))
} else {
print(paste0("**** ", x$subid[1], " is missing posture ****"))
}
return(x)
}
s <- s %>%
group_by(subid) %>%
do(posture.sync(.))
sync_times_check <- read_csv("../data/manual_sync_times/video_sync_times.csv")
s <- sync_times_check %>%
rename(subid = sid) %>%
group_by(subid) %>%
mutate(sync_time_string =toString(sync_time_stamp)) %>%
mutate(frames = str_split_fixed(sync_time_string,":",3)[,3]) %>%
mutate(sec = str_split_fixed(sync_time_string,":",3)[,2]) %>%
mutate(min = str_split_fixed(sync_time_string,":",3)[,1]) %>%
mutate(sync_time_ms = as.numeric(min)*6000 + as.numeric(sec)*1000 + as.numeric(frames)*33.33)
posture.sync <- function(x) {
fname <- paste("../data/posture/",
x$subid[1],
".csv",
sep="")
if (file.exists(fname)) {
postures <- read_csv(fname)
x$posture_start_time = postures$start[1]
print(paste0("**** ", x$subid[1], " has time",x$posture_start_time))
} else {
print(paste0("**** ", x$subid[1], " is missing posture ****"))
}
return(x)
}
s <- s %>%
group_by(subid) %>%
do(posture.sync(.))
s$sync_time_stamp
s$sync_time_ms
s$posture_start_time
s$posture_start_time>s$sync_time_stamp
s$posture_start_time>s$sync_time_ms
is.false(s$posture_start_time>s$sync_time_ms)
sum(s$posture_start_time>s$sync_time_ms)
sum(s$posture_start_time>s$sync_time_ms)
sum(s$posture_start_time<s$sync_time_ms)
s$posture_start_time - s$sync_time_ms
sum(s$posture_start_time<s$sync_time_ms)
(s$posture_start_time<s$sync_time_ms)
(s$posture_start_time<s$sync_time_ms)
s$posture_start_time<s$sync_time_ms
s$posture_start_time-s$sync_time_ms
off_by = diffs[issues]
issues = (s$posture_start_time<s$sync_time_ms)
diffs =  s$posture_start_time-s$sync_time_ms
off_by = diffs[issues]
off_by
off_by / 1000
off_by / 1000*-1
round(off_by / 1000*-1,2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(assertthat)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(assertthat)
## list all candidate drawings
all_drawings = list.files(path='candidate_sketches', pattern = ".png$", recursive = TRUE)
all_drawings = as.tibble(all_drawings)
all_drawings$sketchName = all_drawings$value
## loading drawings to exclude based on manual exclusions
drawings_to_exclude_1 = read_csv(file = 'images_to_exclude/images_to_exclude_biganimalgame.txt', col_names = FALSE)
mutate(sketchName = X1)
## list all candidate drawings
all_drawings = list.files(path='candidate_sketches', pattern = ".png$", recursive = TRUE)
all_drawings = as.tibble(all_drawings)
all_drawings$sketchName = all_drawings$value
## loading drawings to exclude based on manual exclusions
drawings_to_exclude_1 = read_csv(file = 'images_to_exclude/images_to_exclude_biganimalgame.txt', col_names = FALSE) %>%
mutate(sketchName = X1)
drawings_to_exclude <- drawings_to_exclude_1
d <- all_drawings %>%
mutate(category = str_split_fixed(sketchName,'/',2)[,1]) %>%
mutate(sketch_src = str_split_fixed(sketchName,'/',2)[,2]) %>%
mutate(age = str_split_fixed(sketch_src,'_',4)[,3]) %>%
mutate(category_check = str_split_fixed(sketch_src,'_',4)[,1]) %>%
mutate(sessionId = str_split_fixed(sketch_src,'_',4)[,4]) %>% # parse out sessionId, i.e., child
mutate(sessionId = str_split_fixed(sessionId,'.png',2)[1]) %>% # get rid of png
filter(!sketch_src %in% drawings_to_exclude$X1) %>%
select(-value)
##
num_excluded = length(all_drawings$sketchName) - length(d$sketch_src)
countSubset=0
numPerSubSet=30
ages = c('age4','age5','age6','age7','age8')
categories = c('a bear','a camel','a sheep','an tiger')
for (this_age in ages) {
for (this_cat in categories){
## filter by age/cat
d_subsampled <- d %>%
filter(category==this_cat & age==this_age)
## num drawings we could get from this category
numDrawings = length(d_subsampled$sketch_src)
print(numDrawings)
## get subsample
d_equal_subsampled = sample_n(d_subsampled, numPerSubSet)
## fill into d balanced
countSubset = countSubset+1
if (countSubset==1){ d_balanced = d_equal_subsampled
}
else {
d_balanced <- d_balanced %>%
full_join(d_equal_subsampled)
}
}
}
## check we did ok
assert_that((length(ages)*length(categories)*numPerSubSet)==length(d_balanced$sketch_src))
d_balanced$fullPath = paste('candidate_sketches/',d_balanced$sketchName,sep="")
balanced_sketches_dir = 'balanced_sketches'
dir.create('balanced_sketches')
dir.create('balanced_sketches_renamed')
file.copy(d_balanced$fullPath, balanced_sketches_dir)
d_balanced$newSketchName = str_split_fixed(d_balanced$sketch_src," ",2)[,2]
d_balanced$category_new = str_split_fixed(d_balanced$category," ",2)[,2]
#
# ## get rid of stupid spaces in filename
file.rename(from = file.path('balanced_sketches',d_balanced$sketch_src),to=file.path('balanced_sketches_renamed',d_balanced$newSketchName))
#
# ## write out
d_write <- d_balanced %>%
select(-sketchName,-category_check,-fullPath, -sketch_src, -category) %>%
rename(sketch_img_name = newSketchName, category=category_new)
write.csv(d_write, "balanced_sketch_paths.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(assertthat)
## list all candidate drawings
all_drawings = list.files(path='candidate_sketches', pattern = ".png$", recursive = TRUE)
all_drawings = as.tibble(all_drawings)
all_drawings$sketchName = all_drawings$value
## loading drawings to exclude based on manual exclusions
drawings_to_exclude_1 = read_csv(file = 'images_to_exclude/images_to_exclude_biganimalgame.txt', col_names = FALSE) %>%
mutate(sketchName = X1)
drawings_to_exclude <- drawings_to_exclude_1
d <- all_drawings %>%
mutate(category = str_split_fixed(sketchName,'/',2)[,1]) %>%
mutate(sketch_src = str_split_fixed(sketchName,'/',2)[,2]) %>%
mutate(age = str_split_fixed(sketch_src,'_',4)[,3]) %>%
mutate(category_check = str_split_fixed(sketch_src,'_',4)[,1]) %>%
mutate(sessionId = str_split_fixed(sketch_src,'_',4)[,4]) %>% # parse out sessionId, i.e., child
mutate(sessionId = str_split_fixed(sessionId,'.png',2)[1]) %>% # get rid of png
filter(!sketch_src %in% drawings_to_exclude$X1) %>%
select(-value)
##
num_excluded = length(all_drawings$sketchName) - length(d$sketch_src)
countSubset=0
numPerSubSet=30
ages = c('age4','age5','age6','age7','age8')
categories = c('a bear','a camel','a sheep','a tiger')
for (this_age in ages) {
for (this_cat in categories){
## filter by age/cat
d_subsampled <- d %>%
filter(category==this_cat & age==this_age)
## num drawings we could get from this category
numDrawings = length(d_subsampled$sketch_src)
print(numDrawings)
## get subsample
d_equal_subsampled = sample_n(d_subsampled, numPerSubSet)
## fill into d balanced
countSubset = countSubset+1
if (countSubset==1){ d_balanced = d_equal_subsampled
}
else {
d_balanced <- d_balanced %>%
full_join(d_equal_subsampled)
}
}
}
## check we did ok
assert_that((length(ages)*length(categories)*numPerSubSet)==length(d_balanced$sketch_src))
d_balanced$fullPath = paste('candidate_sketches/',d_balanced$sketchName,sep="")
balanced_sketches_dir = 'balanced_sketches'
dir.create('balanced_sketches')
dir.create('balanced_sketches_renamed')
file.copy(d_balanced$fullPath, balanced_sketches_dir)
d_balanced$newSketchName = str_split_fixed(d_balanced$sketch_src," ",2)[,2]
d_balanced$category_new = str_split_fixed(d_balanced$category," ",2)[,2]
#
# ## get rid of stupid spaces in filename
file.rename(from = file.path('balanced_sketches',d_balanced$sketch_src),to=file.path('balanced_sketches_renamed',d_balanced$newSketchName))
#
# ## write out
d_write <- d_balanced %>%
select(-sketchName,-category_check,-fullPath, -sketch_src, -category) %>%
rename(sketch_img_name = newSketchName, category=category_new)
write.csv(d_write, "balanced_sketch_paths.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(assertthat)
## list all candidate drawings
all_drawings = list.files(path='candidate_sketches', pattern = ".png$", recursive = TRUE)
all_drawings = as.tibble(all_drawings)
all_drawings$sketchName = all_drawings$value
## loading drawings to exclude based on manual exclusions
drawings_to_exclude_1 = read_csv(file = 'images_to_exclude/images_to_exclude_biganimalgame.txt', col_names = FALSE) %>%
mutate(sketchName = X1)
drawings_to_exclude <- drawings_to_exclude_1
d <- all_drawings %>%
mutate(category = str_split_fixed(sketchName,'/',2)[,1]) %>%
mutate(sketch_src = str_split_fixed(sketchName,'/',2)[,2]) %>%
mutate(age = str_split_fixed(sketch_src,'_',4)[,3]) %>%
mutate(category_check = str_split_fixed(sketch_src,'_',4)[,1]) %>%
mutate(sessionId = str_split_fixed(sketch_src,'_',4)[,4]) %>% # parse out sessionId, i.e., child
mutate(sessionId = str_split_fixed(sessionId,'.png',2)[1]) %>% # get rid of png
filter(!sketch_src %in% drawings_to_exclude$X1) %>%
select(-value)
##
num_excluded = length(all_drawings$sketchName) - length(d$sketch_src)
countSubset=0
numPerSubSet=30
ages = c('age4','age5','age6','age7','age8')
categories = c('a bear','a camel','a sheep','a tiger')
for (this_age in ages) {
for (this_cat in categories){
## filter by age/cat
d_subsampled <- d %>%
filter(category==this_cat & age==this_age)
## num drawings we could get from this category
numDrawings = length(d_subsampled$sketch_src)
print(numDrawings)
## get subsample
d_equal_subsampled = sample_n(d_subsampled, numPerSubSet)
## fill into d balanced
countSubset = countSubset+1
if (countSubset==1){ d_balanced = d_equal_subsampled
}
else {
d_balanced <- d_balanced %>%
full_join(d_equal_subsampled)
}
}
}
## check we did ok
assert_that((length(ages)*length(categories)*numPerSubSet)==length(d_balanced$sketch_src))
d_balanced$fullPath = paste('candidate_sketches/',d_balanced$sketchName,sep="")
balanced_sketches_dir = 'balanced_sketches'
dir.create('balanced_sketches')
dir.create('balanced_sketches_renamed')
file.copy(d_balanced$fullPath, balanced_sketches_dir)
d_balanced$newSketchName = str_split_fixed(d_balanced$sketch_src," ",2)[,2]
d_balanced$category_new = str_split_fixed(d_balanced$category," ",2)[,2]
#
# ## get rid of stupid spaces in filename
file.rename(from = file.path('balanced_sketches',d_balanced$sketch_src),to=file.path('balanced_sketches_renamed',d_balanced$newSketchName))
#
# ## write out
d_write <- d_balanced %>%
select(-sketchName,-category_check,-fullPath, -sketch_src, -category) %>%
rename(sketch_img_name = newSketchName, category=category_new)
write.csv(d_write, "balanced_sketch_paths.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(assertthat)
## list all candidate drawings
all_drawings = list.files(path='candidate_sketches', pattern = ".png$", recursive = TRUE)
all_drawings = as.tibble(all_drawings)
all_drawings$sketchName = all_drawings$value
## loading drawings to exclude based on manual exclusions
drawings_to_exclude_1 = read_csv(file = 'images_to_exclude/images_to_exclude_biganimalgame.txt', col_names = FALSE) %>%
mutate(sketchName = X1)
drawings_to_exclude <- drawings_to_exclude_1
d <- all_drawings %>%
mutate(category = str_split_fixed(sketchName,'/',2)[,1]) %>%
mutate(sketch_src = str_split_fixed(sketchName,'/',2)[,2]) %>%
mutate(age = str_split_fixed(sketch_src,'_',4)[,3]) %>%
mutate(category_check = str_split_fixed(sketch_src,'_',4)[,1]) %>%
mutate(sessionId = str_split_fixed(sketch_src,'_',4)[,4]) %>% # parse out sessionId, i.e., child
mutate(sessionId = str_split_fixed(sessionId,'.png',2)[1]) %>% # get rid of png
filter(!sketch_src %in% drawings_to_exclude$X1) %>%
select(-value)
##
num_excluded = length(all_drawings$sketchName) - length(d$sketch_src)
countSubset=0
numPerSubSet=30
ages = c('age4','age5','age6','age7','age8')
categories = c('a bear','a camel','a sheep','a tiger')
for (this_age in ages) {
for (this_cat in categories){
## filter by age/cat
d_subsampled <- d %>%
filter(category==this_cat & age==this_age)
## num drawings we could get from this category
numDrawings = length(d_subsampled$sketch_src)
print(numDrawings)
## get subsample
d_equal_subsampled = sample_n(d_subsampled, numPerSubSet)
## fill into d balanced
countSubset = countSubset+1
if (countSubset==1){ d_balanced = d_equal_subsampled
}
else {
d_balanced <- d_balanced %>%
full_join(d_equal_subsampled)
}
}
}
## check we did ok
assert_that((length(ages)*length(categories)*numPerSubSet)==length(d_balanced$sketch_src))
d_balanced$fullPath = paste('candidate_sketches/',d_balanced$sketchName,sep="")
balanced_sketches_dir = 'balanced_sketches'
dir.create('balanced_sketches')
dir.create('balanced_sketches_renamed')
file.copy(d_balanced$fullPath, balanced_sketches_dir)
d_balanced$newSketchName = str_split_fixed(d_balanced$sketch_src," ",2)[,2]
d_balanced$category_new = str_split_fixed(d_balanced$category," ",2)[,2]
#
# ## get rid of stupid spaces in filename
file.rename(from = file.path('balanced_sketches',d_balanced$sketch_src),to=file.path('balanced_sketches_renamed',d_balanced$newSketchName))
#
# ## write out
d_write <- d_balanced %>%
select(-sketchName,-category_check,-fullPath, -sketch_src, -category) %>%
rename(sketch_img_name = newSketchName, category=category_new)
write.csv(d_write, "balanced_sketch_paths.csv")
